pipeline {
    agent {
        docker {
            image 'openjdk:21-jre-alpine' // Docker image with Java 21 runtime (alpine-based)
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
        }
    }

    environment {
        // Environment variables
        DOCKER_REGISTRY = "docker.io"
        DOCKER_IMAGE = "dushf12/spring-mvc-app:${BUILD_NUMBER}" // Docker image name with build tag
        SONAR_URL = "http://54.209.212.200:9000" // SonarQube server address
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }

    stages {
        // Install Maven in the Docker container (required for Alpine base image)
        stage('Install Maven') {
            steps {
                echo "Installing Maven on Alpine container"
                sh 'apk add --no-cache maven'
            }
        }

        // Checkout the code from the GitHub repository
        stage('Checkout') {
            steps {
                echo "Checking out source code from GitHub"
                git branch: 'main', url: 'https://github.com/dushf12/jenkins-end-to-end-cicd-pipeline.git'
            }
        }

        // Build and test the Spring MVC application
        stage('Build and Test') {
            steps {
                echo "Building and testing the Spring MVC application"
                sh 'mvn clean package'
            }
        }

        // Perform static code analysis with SonarQube
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    echo "Running static code analysis with SonarQube"
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.login=$SONAR_AUTH_TOKEN \
                        -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        // Build and push the Docker image to Docker Hub
        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building Docker image"
                    sh 'docker build -t ${DOCKER_IMAGE} .'

                    echo "Pushing Docker image to Docker Hub"
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        // Update the Kubernetes deployment file with the new image tag
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "jenkins-end-to-end-cicd-pipeline"
                GIT_USER_NAME = "dushf12"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    echo "Updating deployment file with new Docker image tag"
                    sh '''
                        git config user.email "dushf12@gmail.com"
                        git config user.name "dushf12"

                        # Replace image tag in deployment.yml
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" path/to/deployment.yml

                        # Commit and push changes back to GitHub
                        git add path/to/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
